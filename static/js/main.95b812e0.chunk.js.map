{"version":3,"sources":["App.js","index.js"],"names":["Window","_ref","id","title","children","isMinimized","isFullscreen","onClose","onMinimize","onToggleFullscreen","windowClassNames","defaultSize","width","height","fullscreenSize","size","setSize","useState","position","setPosition","x","y","_jsx","Rnd","onDragStop","e","d","onResizeStop","direction","ref","delta","style","bounds","className","enableResizing","disableDragging","dragHandleClassName","_jsxs","onClick","handleToggleFullscreen","Taskbar","_ref2","windows","onOpenWindow","map","window","App","setWindows","content","isOpen","closeWindow","minimizeWindow","toggleFullscreenWindow","filter","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.95b812e0.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Rnd } from 'react-rnd';\nimport './App.css';\n\nconst Window = ({\n  id,\n  title,\n  children,\n  isMinimized,\n  isFullscreen,\n  onClose,\n  onMinimize,\n  onToggleFullscreen,\n}) => {\n  const windowClassNames = `window ${isFullscreen ? 'fullscreen' : ''} ${isMinimized ? 'minimized' : ''}`;\n\n  const defaultSize = { width: 300, height: 200 };\n  const fullscreenSize = { width: '100%', height: '100%' };\n\n  const [size, setSize] = useState(defaultSize);\n  const [position, setPosition] = useState({ x: 50, y: 50 });\n\n  const handleToggleFullscreen = () => {\n    if (isFullscreen) {\n      setSize(defaultSize);\n      setPosition({ x: 50, y: 50 });\n    } else {\n      setSize(fullscreenSize);\n      setPosition({ x: 0, y: 0 });\n    }\n    onToggleFullscreen(id);\n  };\n\n  return (\n    <Rnd\n      size={size}\n      position={position}\n      onDragStop={(e, d) => setPosition({ x: d.x, y: d.y })}\n      onResizeStop={(e, direction, ref, delta, position) => {\n        setSize({\n          width: ref.style.width,\n          height: ref.style.height,\n        });\n        setPosition(position);\n      }}\n      bounds=\"parent\"\n      className={windowClassNames}\n      enableResizing={!isFullscreen && !isMinimized}\n      disableDragging={isFullscreen || isMinimized}\n      dragHandleClassName=\"window-header\"\n    >\n      <div>\n        <div className=\"window-header\">\n          <span>{title}</span>\n          <div className=\"window-controls\">\n            <button onClick={() => onMinimize(id)}>{isMinimized ? 'ðŸ”¼' : 'ðŸ”½'}</button>\n            <button onClick={handleToggleFullscreen}>{isFullscreen ? 'ðŸ——' : 'ðŸ—–'}</button>\n            <button onClick={() => onClose(id)}>X</button>\n          </div>\n        </div>\n        {!isMinimized && <div className=\"window-content\">{children}</div>}\n      </div>\n    </Rnd>\n  );\n};\n\nconst Taskbar = ({ windows, onOpenWindow }) => {\n  return (\n    <div className=\"taskbar\">\n      <div className=\"taskbar-center\">\n        {windows.map(window => (\n          <button key={window.id} onClick={() => onOpenWindow(window.id)}>\n            {window.title}\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst App = () => {\n  const [windows, setWindows] = useState([\n    { id: 1, title: 'Window 1', content: 'Content of Window 1', isOpen: true, isMinimized: false, isFullscreen: false },\n    { id: 2, title: 'Window 2', content: 'Content of Window 2', isOpen: false, isMinimized: false, isFullscreen: false },\n  ]);\n\n  const openWindow = (id) => {\n    setWindows(windows.map(window => window.id === id ? { ...window, isOpen: true, isMinimized: false } : window));\n  };\n\n  const closeWindow = (id) => {\n    setWindows(windows.map(window => window.id === id ? { ...window, isOpen: false } : window));\n  };\n\n  const minimizeWindow = (id) => {\n    setWindows(windows.map(window => window.id === id ? { ...window, isMinimized: !window.isMinimized } : window));\n  };\n\n  const toggleFullscreenWindow = (id) => {\n    setWindows(windows.map(window => window.id === id ? { ...window, isFullscreen: !window.isFullscreen } : window));\n  };\n\n  return (\n    <div className=\"desktop\">\n      {windows.filter(window => window.isOpen).map(window => (\n        <Window\n          key={window.id}\n          id={window.id}\n          title={window.title}\n          isMinimized={window.isMinimized}\n          isFullscreen={window.isFullscreen}\n          onClose={closeWindow}\n          onMinimize={minimizeWindow}\n          onToggleFullscreen={toggleFullscreenWindow}\n        >\n          {window.content}\n        </Window>\n      ))}\n      <Taskbar windows={windows} onOpenWindow={openWindow} />\n    </div>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}