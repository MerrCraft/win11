{"version":3,"sources":["App.js","index.js"],"names":["Window","_ref","id","title","children","isMinimized","isFullscreen","onClose","onMinimize","onToggleFullscreen","windowClassNames","_jsx","Draggable","handle","bounds","disabled","_jsxs","className","onClick","Taskbar","_ref2","windows","onOpenWindow","map","window","App","setWindows","useState","content","isOpen","closeWindow","minimizeWindow","toggleFullscreenWindow","filter","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"yPAIA,MAAMA,EAASC,IAAkG,IAAjG,GAAEC,EAAE,MAAEC,EAAK,SAAEC,EAAQ,YAAEC,EAAW,aAAEC,EAAY,QAAEC,EAAO,WAAEC,EAAU,mBAAEC,GAAoBR,EACzG,MAAMS,EAAmB,UAAUJ,EAAe,aAAe,MAAMD,EAAc,YAAc,KAEnG,OACEM,cAACC,IAAS,CAACC,OAAO,iBAAiBC,OAAO,SAASC,SAAUT,GAAgBD,EAAYD,SACvFY,eAAA,OAAKC,UAAWP,EAAiBN,SAAA,CAC/BY,eAAA,OAAKC,UAAU,gBAAeb,SAAA,CAC5BO,cAAA,QAAAP,SAAOD,IACPa,eAAA,OAAKC,UAAU,kBAAiBb,SAAA,CAC9BO,cAAA,UAAQO,QAASA,IAAMV,EAAWN,GAAIE,SAAEC,EAAc,eAAO,iBAC7DM,cAAA,UAAQO,QAASA,IAAMT,EAAmBP,GAAIE,SAAEE,EAAe,eAAO,iBACtEK,cAAA,UAAQO,QAASA,IAAMX,EAAQL,GAAIE,SAAC,aAGtCC,GAAeM,cAAA,OAAKM,UAAU,iBAAgBb,SAAEA,QAE1C,EAIVe,EAAUC,IAAgC,IAA/B,QAAEC,EAAO,aAAEC,GAAcF,EACxC,OACET,cAAA,OAAKM,UAAU,UAASb,SACrBiB,EAAQE,KAAIC,GACXb,cAAA,UAAwBO,QAASA,IAAMI,EAAaE,EAAOtB,IAAIE,SAC5DoB,EAAOrB,OADGqB,EAAOtB,OAIlB,EA+CKuB,MA3CHA,KACV,MAAOJ,EAASK,GAAcC,mBAAS,CACrC,CAAEzB,GAAI,EAAGC,MAAO,WAAYyB,QAAS,sBAAuBC,QAAQ,EAAMxB,aAAa,EAAOC,cAAc,GAC5G,CAAEJ,GAAI,EAAGC,MAAO,WAAYyB,QAAS,sBAAuBC,QAAQ,EAAOxB,aAAa,EAAOC,cAAc,KAOzGwB,EAAe5B,IACnBwB,EAAWL,EAAQE,KAAIC,GAAUA,EAAOtB,KAAOA,EAAK,IAAKsB,EAAQK,QAAQ,GAAUL,IAAQ,EAGvFO,EAAkB7B,IACtBwB,EAAWL,EAAQE,KAAIC,GAAUA,EAAOtB,KAAOA,EAAK,IAAKsB,EAAQnB,aAAcmB,EAAOnB,aAAgBmB,IAAQ,EAG1GQ,EAA0B9B,IAC9BwB,EAAWL,EAAQE,KAAIC,GAAUA,EAAOtB,KAAOA,EAAK,IAAKsB,EAAQlB,cAAekB,EAAOlB,cAAiBkB,IAAQ,EAGlH,OACER,eAAA,OAAKC,UAAU,UAASb,SAAA,CACrBiB,EAAQY,QAAOT,GAAUA,EAAOK,SAAQN,KAAIC,GAC3Cb,cAACX,EAAM,CAELE,GAAIsB,EAAOtB,GACXC,MAAOqB,EAAOrB,MACdE,YAAamB,EAAOnB,YACpBC,aAAckB,EAAOlB,aACrBC,QAASuB,EACTtB,WAAYuB,EACZtB,mBAAoBuB,EAAuB5B,SAE1CoB,EAAOI,SATHJ,EAAOtB,MAYhBS,cAACQ,EAAO,CAACE,QAASA,EAASC,aAhCXpB,IAClBwB,EAAWL,EAAQE,KAAIC,GAAUA,EAAOtB,KAAOA,EAAK,IAAKsB,EAAQK,QAAQ,EAAMxB,aAAa,GAAUmB,IAAQ,MAgCxG,ECtEVU,IAASC,OACPxB,cAACyB,IAAMC,WAAU,CAAAjC,SACfO,cAACc,EAAG,MAENa,SAASC,eAAe,Q","file":"static/js/main.3a07a89d.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport Draggable from 'react-draggable';\nimport './App.css';\n\nconst Window = ({ id, title, children, isMinimized, isFullscreen, onClose, onMinimize, onToggleFullscreen }) => {\n  const windowClassNames = `window ${isFullscreen ? 'fullscreen' : ''} ${isMinimized ? 'minimized' : ''}`;\n\n  return (\n    <Draggable handle=\".window-header\" bounds=\"parent\" disabled={isFullscreen || isMinimized}>\n      <div className={windowClassNames}>\n        <div className=\"window-header\">\n          <span>{title}</span>\n          <div className=\"window-controls\">\n            <button onClick={() => onMinimize(id)}>{isMinimized ? 'ðŸ”¼' : 'ðŸ”½'}</button>\n            <button onClick={() => onToggleFullscreen(id)}>{isFullscreen ? 'ðŸ——' : 'ðŸ—–'}</button>\n            <button onClick={() => onClose(id)}>X</button>\n          </div>\n        </div>\n        {!isMinimized && <div className=\"window-content\">{children}</div>}\n      </div>\n    </Draggable>\n  );\n};\n\nconst Taskbar = ({ windows, onOpenWindow }) => {\n  return (\n    <div className=\"taskbar\">\n      {windows.map(window => (\n        <button key={window.id} onClick={() => onOpenWindow(window.id)}>\n          {window.title}\n        </button>\n      ))}\n    </div>\n  );\n};\n\nconst App = () => {\n  const [windows, setWindows] = useState([\n    { id: 1, title: 'Window 1', content: 'Content of Window 1', isOpen: true, isMinimized: false, isFullscreen: true },\n    { id: 2, title: 'Window 2', content: 'Content of Window 2', isOpen: false, isMinimized: false, isFullscreen: false },\n  ]);\n\n  const openWindow = (id) => {\n    setWindows(windows.map(window => window.id === id ? { ...window, isOpen: true, isMinimized: false } : window));\n  };\n\n  const closeWindow = (id) => {\n    setWindows(windows.map(window => window.id === id ? { ...window, isOpen: false } : window));\n  };\n\n  const minimizeWindow = (id) => {\n    setWindows(windows.map(window => window.id === id ? { ...window, isMinimized: !window.isMinimized } : window));\n  };\n\n  const toggleFullscreenWindow = (id) => {\n    setWindows(windows.map(window => window.id === id ? { ...window, isFullscreen: !window.isFullscreen } : window));\n  };\n\n  return (\n    <div className=\"desktop\">\n      {windows.filter(window => window.isOpen).map(window => (\n        <Window\n          key={window.id}\n          id={window.id}\n          title={window.title}\n          isMinimized={window.isMinimized}\n          isFullscreen={window.isFullscreen}\n          onClose={closeWindow}\n          onMinimize={minimizeWindow}\n          onToggleFullscreen={toggleFullscreenWindow}\n        >\n          {window.content}\n        </Window>\n      ))}\n      <Taskbar windows={windows} onOpenWindow={openWindow} />\n    </div>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}