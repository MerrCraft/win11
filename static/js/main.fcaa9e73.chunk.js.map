{"version":3,"sources":["App.js","index.js"],"names":["Window","_ref","id","title","children","isMinimized","isFullscreen","onClose","onMinimize","onToggleFullscreen","windowClassNames","_jsx","Draggable","disabled","_jsxs","className","onClick","Taskbar","_ref2","windows","onOpenWindow","map","window","App","setWindows","useState","content","isOpen","closeWindow","minimizeWindow","toggleFullscreenWindow","filter","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"yPAIA,MAAMA,EAASC,IAAkG,IAAjG,GAAEC,EAAE,MAAEC,EAAK,SAAEC,EAAQ,YAAEC,EAAW,aAAEC,EAAY,QAAEC,EAAO,WAAEC,EAAU,mBAAEC,GAAoBR,EACzG,MAAMS,EAAmB,UAAUJ,EAAe,aAAe,MAAMD,EAAc,YAAc,KAEnG,OACEM,cAACC,IAAS,CAACC,SAAUP,GAAgBD,EAAYD,SAC/CU,eAAA,OAAKC,UAAWL,EAAiBN,SAAA,CAC/BU,eAAA,OAAKC,UAAU,gBAAeX,SAAA,CAC5BO,cAAA,QAAAP,SAAOD,IACPW,eAAA,OAAKC,UAAU,kBAAiBX,SAAA,CAC9BO,cAAA,UAAQK,QAASA,IAAMR,EAAWN,GAAIE,SAAEC,EAAc,eAAO,iBAC7DM,cAAA,UAAQK,QAASA,IAAMP,EAAmBP,GAAIE,SAAEE,EAAe,eAAO,iBACtEK,cAAA,UAAQK,QAASA,IAAMT,EAAQL,GAAIE,SAAC,aAGtCC,GAAeM,cAAA,OAAKI,UAAU,iBAAgBX,SAAEA,QAE1C,EAIVa,EAAUC,IAAgC,IAA/B,QAAEC,EAAO,aAAEC,GAAcF,EACxC,OACEP,cAAA,OAAKI,UAAU,UAASX,SACrBe,EAAQE,KAAIC,GACXX,cAAA,UAAwBK,QAASA,IAAMI,EAAaE,EAAOpB,IAAIE,SAC5DkB,EAAOnB,OADGmB,EAAOpB,OAIlB,EA+CKqB,MA3CHA,KACV,MAAOJ,EAASK,GAAcC,mBAAS,CACrC,CAAEvB,GAAI,EAAGC,MAAO,WAAYuB,QAAS,sBAAuBC,QAAQ,EAAMtB,aAAa,EAAOC,cAAc,GAC5G,CAAEJ,GAAI,EAAGC,MAAO,WAAYuB,QAAS,sBAAuBC,QAAQ,EAAOtB,aAAa,EAAOC,cAAc,KAOzGsB,EAAe1B,IACnBsB,EAAWL,EAAQE,KAAIC,GAAUA,EAAOpB,KAAOA,EAAK,IAAKoB,EAAQK,QAAQ,GAAUL,IAAQ,EAGvFO,EAAkB3B,IACtBsB,EAAWL,EAAQE,KAAIC,GAAUA,EAAOpB,KAAOA,EAAK,IAAKoB,EAAQjB,aAAciB,EAAOjB,aAAgBiB,IAAQ,EAG1GQ,EAA0B5B,IAC9BsB,EAAWL,EAAQE,KAAIC,GAAUA,EAAOpB,KAAOA,EAAK,IAAKoB,EAAQhB,cAAegB,EAAOhB,cAAiBgB,IAAQ,EAGlH,OACER,eAAA,OAAKC,UAAU,UAASX,SAAA,CACrBe,EAAQY,QAAOT,GAAUA,EAAOK,SAAQN,KAAIC,GAC3CX,cAACX,EAAM,CAELE,GAAIoB,EAAOpB,GACXC,MAAOmB,EAAOnB,MACdE,YAAaiB,EAAOjB,YACpBC,aAAcgB,EAAOhB,aACrBC,QAASqB,EACTpB,WAAYqB,EACZpB,mBAAoBqB,EAAuB1B,SAE1CkB,EAAOI,SATHJ,EAAOpB,MAYhBS,cAACM,EAAO,CAACE,QAASA,EAASC,aAhCXlB,IAClBsB,EAAWL,EAAQE,KAAIC,GAAUA,EAAOpB,KAAOA,EAAK,IAAKoB,EAAQK,QAAQ,EAAMtB,aAAa,GAAUiB,IAAQ,MAgCxG,ECtEVU,IAASC,OACPtB,cAACuB,IAAMC,WAAU,CAAA/B,SACfO,cAACY,EAAG,MAENa,SAASC,eAAe,Q","file":"static/js/main.fcaa9e73.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport Draggable from 'react-draggable';\nimport './App.css';\n\nconst Window = ({ id, title, children, isMinimized, isFullscreen, onClose, onMinimize, onToggleFullscreen }) => {\n  const windowClassNames = `window ${isFullscreen ? 'fullscreen' : ''} ${isMinimized ? 'minimized' : ''}`;\n\n  return (\n    <Draggable disabled={isFullscreen || isMinimized}>\n      <div className={windowClassNames}>\n        <div className=\"window-header\">\n          <span>{title}</span>\n          <div className=\"window-controls\">\n            <button onClick={() => onMinimize(id)}>{isMinimized ? 'ðŸ”¼' : 'ðŸ”½'}</button>\n            <button onClick={() => onToggleFullscreen(id)}>{isFullscreen ? 'ðŸ——' : 'ðŸ—–'}</button>\n            <button onClick={() => onClose(id)}>X</button>\n          </div>\n        </div>\n        {!isMinimized && <div className=\"window-content\">{children}</div>}\n      </div>\n    </Draggable>\n  );\n};\n\nconst Taskbar = ({ windows, onOpenWindow }) => {\n  return (\n    <div className=\"taskbar\">\n      {windows.map(window => (\n        <button key={window.id} onClick={() => onOpenWindow(window.id)}>\n          {window.title}\n        </button>\n      ))}\n    </div>\n  );\n};\n\nconst App = () => {\n  const [windows, setWindows] = useState([\n    { id: 1, title: 'Window 1', content: 'Content of Window 1', isOpen: true, isMinimized: false, isFullscreen: true },\n    { id: 2, title: 'Window 2', content: 'Content of Window 2', isOpen: false, isMinimized: false, isFullscreen: false },\n  ]);\n\n  const openWindow = (id) => {\n    setWindows(windows.map(window => window.id === id ? { ...window, isOpen: true, isMinimized: false } : window));\n  };\n\n  const closeWindow = (id) => {\n    setWindows(windows.map(window => window.id === id ? { ...window, isOpen: false } : window));\n  };\n\n  const minimizeWindow = (id) => {\n    setWindows(windows.map(window => window.id === id ? { ...window, isMinimized: !window.isMinimized } : window));\n  };\n\n  const toggleFullscreenWindow = (id) => {\n    setWindows(windows.map(window => window.id === id ? { ...window, isFullscreen: !window.isFullscreen } : window));\n  };\n\n  return (\n    <div className=\"desktop\">\n      {windows.filter(window => window.isOpen).map(window => (\n        <Window\n          key={window.id}\n          id={window.id}\n          title={window.title}\n          isMinimized={window.isMinimized}\n          isFullscreen={window.isFullscreen}\n          onClose={closeWindow}\n          onMinimize={minimizeWindow}\n          onToggleFullscreen={toggleFullscreenWindow}\n        >\n          {window.content}\n        </Window>\n      ))}\n      <Taskbar windows={windows} onOpenWindow={openWindow} />\n    </div>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}